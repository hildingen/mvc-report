{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}
{% block headertitle %}Reports{% endblock %}

{% block body %}
    <h1>Redovisningstexter DV1608 "mvc"</h1>

    <h3>Snabblänkar: </h3>
    <div class="quick-links">
        <a href="/report#kmom01">Kmom01</a>
        <a href="/report#kmom02">Kmom02</a>
        <a href="/report#kmom03">Kmom03</a>
        <a href="/report#kmom04">Kmom04</a>
        <a href="/report#kmom05">Kmom05</a>
        <a href="/report#kmom06">Kmom06</a>
    </div>

    <div class="report-div" id="kmom01">
        <h2>Kmom01</h2>

        <p>Inför denna kursen gick vi igenom oopython kursen vilket skapade ett objektorienterat tänk så jag känner att jag har en grund att stå på när det gäller objektorientering. Jag har även ltie erfarenhet av det i programmeringspråken c++ och Java. </p>
    
        <p>
            Koden och strukturen för att skapa klasser och objekt är väldigt lik andra programmeringspråk. Vi kan definera en klass med med class och sedan lägga till attribut och metoder. Vad jag förstår så använder vi helst privata variabler och använder oss av getters och setters i PHP.
            Så för att sammanfatta vad som behövs för att komma igång med klasser är den grundläggande förståelse för hur klasser är uppbygda med attribut och metoder och hur vi kan skapa objekt från klassen.
        </p>

        <p>
            Koden och strukturen i report appen använder vi ju oss av symfony som ramverk och jag tycker att det är en relativt simpel struktur att förstå sig på. I vår Controller map så kan vi enkelt definera routes och vara twig filer som ligger i templates kan vi enkelt rendera
            som html. Just twig filerna har vi ju arbetat med innan så det var inget problem med att komma igång med. Så för snabb sammanfattning så tycker jag att det är en bra struktur som blir bra att bygga vidare på.
        </p>
    
        <p>
            Eftersom vi bara översiktligt skulle kolla igenom PHP The Right Way dokumentet har ajg inte noggrant läst igenom allting utan jag skummade igenom och läsa lite mer noggrant på de delar som jag tycker är intressant och det är specifikt
            testning som vi hittar i kapitel 12. Dem skriver tydligt att med bra automatiserade tester kan leda till väl byggda applikationer som inte går sönder om man ändrar i koden. Det är något jag absolut vill lära mig mer om, hur man bygger automatiserade tester i PHP.
            En annan del som jag tycker att intressant och väldigt aktuell i dagsläget är kapitel 11 Säkerhet. Hur vi skriver PHP kod för att uppfylla säkerhetskraven så att vi inte får några data läckor. 
        </p>
    
        <p>
            Mitt TIL för detta moment är ju självklart grunden i symfony men även att sätta upp git repo och skriva en readme som beskriver hur man klonar ner repot. Jag hade väldiga problem med att få detta att fungera då när jag klonade ner repot och försökte göra en composer install på det,
            då fick jag error att det saknades .env fil och jag vet inte varför jag la till i min .gitignore att .env inte skulle med till mitt git repo. Efter att ha läst dokumentationen så behövs .env fil följa med så det uppdaterade jag och nu fungerade det.
            Så mitt största TIL för detta är faktiskt git och hur man trixar med det.
        </p>
    </div>

    <div class="report-div" id="kmom02">
        <h2>Kmom02</h2>

        <p> Text </p>
    </div>

    <div class="report-div" id="kmom03">
        <h2>Kmom03</h2>

        <p> Text </p>
    </div>

    <div class="report-div" id="kmom04">
        <h2>Kmom04</h2>

        <p> Text </p>
    </div>

    <div class="report-div" id="kmom05">
        <h2>Kmom05</h2>

        <p> Text </p>
    </div>

    <div class="report-div" id="kmom06">
        <h2>Kmom06</h2>

        <p> Text </p>
    </div>
    
    
{% endblock %}