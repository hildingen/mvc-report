{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}
{% block headertitle %}Reports{% endblock %}

{% block body %}
    <h1>Redovisningstexter DV1608 "mvc"</h1>

    <h3>Snabblänkar: </h3>
    <div class="quick-links">
        <a href="#kmom01">Kmom01</a>
        <a href="#kmom02">Kmom02</a>
        <a href="#kmom03">Kmom03</a>
        <a href="#kmom04">Kmom04</a>
        <a href="#kmom05">Kmom05</a>
        <a href="#kmom06">Kmom06</a>
    </div>

    <div class="report-div" id="kmom01">
        <h2>Kmom01</h2>

        <p>Inför denna kursen gick vi igenom oopython kursen vilket skapade ett objektorienterat tänk så jag känner att jag har en grund att stå på när det gäller objektorientering. Jag har även ltie erfarenhet av det i programmeringspråken c++ och Java. </p>
    
        <p>
            Koden och strukturen för att skapa klasser och objekt är väldigt lik andra programmeringspråk. Vi kan definera en klass med med class och sedan lägga till attribut och metoder. Vad jag förstår så använder vi helst privata variabler och använder oss av getters och setters i PHP.
            Så för att sammanfatta vad som behövs för att komma igång med klasser är den grundläggande förståelse för hur klasser är uppbygda med attribut och metoder och hur vi kan skapa objekt från klassen.
        </p>

        <p>
            Koden och strukturen i report appen använder vi ju oss av symfony som ramverk och jag tycker att det är en relativt simpel struktur att förstå sig på. I vår Controller map så kan vi enkelt definera routes och vara twig filer som ligger i templates kan vi enkelt rendera
            som html. Just twig filerna har vi ju arbetat med innan så det var inget problem med att komma igång med. Så för snabb sammanfattning så tycker jag att det är en bra struktur som blir bra att bygga vidare på.
        </p>
    
        <p>
            Eftersom vi bara översiktligt skulle kolla igenom PHP The Right Way dokumentet har ajg inte noggrant läst igenom allting utan jag skummade igenom och läsa lite mer noggrant på de delar som jag tycker är intressant och det är specifikt
            testning som vi hittar i kapitel 12. Dem skriver tydligt att med bra automatiserade tester kan leda till väl byggda applikationer som inte går sönder om man ändrar i koden. Det är något jag absolut vill lära mig mer om, hur man bygger automatiserade tester i PHP.
            En annan del som jag tycker att intressant och väldigt aktuell i dagsläget är kapitel 11 Säkerhet. Hur vi skriver PHP kod för att uppfylla säkerhetskraven så att vi inte får några data läckor. 
        </p>
    
        <p>
            Mitt TIL för detta moment är ju självklart grunden i symfony men även att sätta upp git repo och skriva en readme som beskriver hur man klonar ner repot. Jag hade väldiga problem med att få detta att fungera då när jag klonade ner repot och försökte göra en composer install på det,
            då fick jag error att det saknades .env fil och jag vet inte varför jag la till i min .gitignore att .env inte skulle med till mitt git repo. Efter att ha läst dokumentationen så behövs .env fil följa med så det uppdaterade jag och nu fungerade det.
            Så mitt största TIL för detta är faktiskt git och hur man trixar med det.
        </p>
    </div>

    <div class="report-div" id="kmom02">
        <h2>Kmom02</h2>

        <p>Arv fungerar precis som det låter att en klass "ärver" funktioner och egenskaper från en annan klass. Vi kan ta ett exempel där vi har en klass "Djur" som har specifika egenskaper för ett djur t.ex namn, vikt längd. Om vi vill bygga ut detta kan vi skapa djur klasser som ärver från Djur klassen. Vi kan då t.ex skapa klassen "Hund" som då har egenskaper dom Djur klassen har och så kan vi fortsätta implementationen.</p>
        <p>Komposition är en relation mellan två klasser och det menas med att att en klass "äger" den andra klassen. Om den ena klassen som äger det andra tas bort, gör även objekten som ägs av klassen. Kompositiion kan vara t.ex om man skapar objekt av en annan klass i en klass konstruktor.</p>
        <p>Ett interface är ett sätt att "lova" vad en klass kommer att innehålla. Om man specar upp ett interface för an klass och använder det så lovar man programmet att dem funktioner som specas upp finns implementerade.</p>
        <p>Trait kan implementeras och användas av flera olika klasser. Har man en t.ex metod som ser likadan ut för flera klasser så kan man implementera ett trteit och använda i klasserna. Är det så att man behöver ändra koden så räcker det då att man gör det a traitet.</p>

        <p>Uppgiften tycker jag gick bra efter att ha gjort övningen med Dice så jag jag en förståelse på hur jag kunde göra och min implementation av klasserna ser likvärdig ut mot Dice klasserna men anpassat för att klara min kod med Card. För att lösa uppgiften så var det viktiga för att att få ut korten på korrekt sätt och jag ändrade lite fram och tillbaka och tillslut valde jag att använda mig av två variabler, value och suit på korten så att jag kunde sortera på dem.</p>
        <p>Det jag var lite osäker på i slutet av kursmomentet var om jag skulle använda mig av de API som jag byggde då implementationen av dem i min controller ser iprincip likadan ut. Men jag valde att inte använda mig av det men jag testade mina API med hjälp av Postman för att se så dem fungerade korrekt.</p>

        <p>Jag tycker att det går bättre och bättre med att jobba med Symfony och man får en liten bredare förståelse för ramverket. Jag tycker även att MVC fungerar bra och det är skönt att ha koden uppdelad vilket gör det lättare att utveckla och debugga.</p>
        
        <p>Det som jag tyckte var lite komplicerat att förstå var hur jag plockar ut ett värde från URL i Symfony för att sedan använda det i koden. Så efter mycket slit och läsning så tror jag att jag greppade det så det är absolut mitt TIL för detta moment.</p>
    </div>

    <div class="report-div" id="kmom03">
        <h2>Kmom03</h2>

        <p>
            Jag tyckte att det gick bra att modellera med flödesdiagram och psuedokod. Jag valde att inte göra alltför komplicerade lösningar så jag försökte hålla det väldigt enkelt. Mitt flödesdiagram förklarar själva "game" loopen vilket jag tycker
            att jag implemneterade efer och fick till ett bra flöde som speglar diagrammet. I mitt psuedokod exempel valde jag att skriva för att hämta själva värdet för hela korthanden då jag på förhand tänkte att det skulle innehålla den största kompleciteten
            då vi behöver hantera både siffror och bokstäver och om "A" är värda 14 eller 1. Jag hade en plan när jag skrev psuedokod exemplet men min själva implementation av den kod delen skiljer sig något då jag fick lägga till lite funktionalitet för att det 
            skulle fungera som jag ville. Jag tror att det kan vara ett väldigt bra verktyg att använda vid starten på projekt för att ha något att "luta" sig emot när det står stilla. Har man på förhand tänkt igenom och gjort ordentliga diagram så borde projekten man
            jobbar med gå smidigare och inte stå stilla så länge.
        </p>

        <p>
            Jag tycker att jag fick ihop en bra struktur och jag försökte förhålla mig till att ha så lite kod som möjligt i mina controllers och hålla mestadels av koden i mina klasser. Kort klasserna hade vi ju redan byggt upp i föregående kmom så de kopierade jag
            bara över till detta kmom men fick ändra lite minimalt i klasserna för att dem skulle fungera som jag ville. Jag valde även att skapa en klass "Game21" som skulle hålla själva spelet och sköta all funktionalitet och det fungerade bra skulle jag säga
            , jag fick till metoder som skötte det de skulle. Själva Game21 objektet håller en hand för en spelare och en hand för "banken" och en kortlek. Så att skapa metoder för delarna gick väldigt smidigt fram tycker jag. Det jag ser som jag skulle kunna förbättra är att jag
            kanske skulle dela upp mina twig filer lite mer. Nu sköter jag själva renderingen av spelet i en twig fil men kanske att jag skulle bryta ner den i mindre delar. Ska man vara petig så skulle animationer också lyfta själva spelet för att göra det mer levande.
        </p>

        <p>
            Nu efter kmom03 känner jag att man börjar få grepp om det även fast jag hade väldigt svårt att komma igång med kmom03 då jag fick ett error i början och kunde inte starta igång applikationen. Efter mycket sökande i dokumentationen och tittande på andra symfony objekt såg jag
            att min "src" mapp hade hoppat ner i min templates mapp och därav hittade inte Symfony "Kernel.php" filen vilket gjorde att jag inte kunde starta applikationen. Efter att jag flyttade upp den till root igen så fungerade det.
            Men kort sagt så känns det bättre nu och att dela upp enligt "MVC" får jag en tydlig struktur.
        </p>

        <p>
            Mitt TIL för detta kmom är faktiskt felsökning och letande i dokumentationen för Symfony då det tog mest tid för mig detta kmom. Det känns som det både kan vara bra och dåligt att jag fick detta error men nu är jag en erfarenhet rikare och lärt mig något nytt.
        </p>
    </div>

    <div class="report-div" id="kmom04">
        <h2>Kmom04</h2>

        <p> Text </p>
    </div>

    <div class="report-div" id="kmom05">
        <h2>Kmom05</h2>

        <p> Text </p>
    </div>

    <div class="report-div" id="kmom06">
        <h2>Kmom06</h2>

        <p> Text </p>
    </div>
    
    
{% endblock %}